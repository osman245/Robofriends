{"version":3,"sources":["component/CardList.js","component/SearchBox.js","component/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","ErrorBoundry","props","state","hasError","this","children","error","info","setState","Component","App","onSearchChange","event","target","value","console","log","fetch","then","response","json","users","filteredRobots","filter","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"oNA+BeA,EA5BE,SAAC,GAAa,EAAZC,OAElB,MAAM,IAAIC,MAAM,YCWFC,EAdG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAEhC,OACA,yBAAKC,UAAU,OACf,2BACAA,UAAU,mCACVC,KAAK,SACJC,YAAY,gBACZC,SAAUJ,MCgBIK,G,wDAtBf,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IACDC,MAAO,CACXC,UAAU,GAHQ,E,qDAQlB,OAAGC,KAAKF,MAAMC,SACN,qCAEDC,KAAKH,MAAMI,W,wCAGDC,EAAMC,GACvBH,KAAKI,SAAS,CAACL,UAAS,Q,GAhBEM,cCqDZC,E,kDAhDd,aAAc,IAAD,8BACZ,gBAmBFC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAAEd,YAAakB,EAAMC,OAAOC,SAnBzC,EAAKZ,MAAQ,CACRX,OAAO,GACVG,YAAY,IAEdqB,QAAQC,IAAI,eANA,E,gEASO,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACjB,OAAO8B,S,+BAY7B,IAAD,OACFC,EAAiBlB,KAAKF,MAAMX,OAAOgC,QAAO,SAAAhC,GAC7C,OAAOA,EAAOiC,KAAKC,cAAcC,SAAS,EAAKxB,MAAMR,YAAY+B,kBAEpE,OAAgC,IAA7BrB,KAAKF,MAAMX,OAAOoC,OACb,uCAGR,yBAAK/B,UAAU,MAEf,wBAAIA,UAAU,MAAd,eAEA,kBAAC,EAAD,CAAWD,aAAcS,KAAKO,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQ+B,U,GAvCHb,a,MCKEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAOC,SAASC,eAAe,SD4HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLS,QAAQT,MAAMA,EAAMqC,a","file":"static/js/main.36ae4f6b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\nif(true) {\r\n\tthrow new Error('Noooooo');\r\n}\r\n\r\nreturn (\r\n<div>\r\n{\r\n robots.map((user,i) => {\r\n   return (\r\n\r\n\t<Card \r\n\tkey={i} //remove the key you want gone\r\n\t id={robots[i].id}\r\n\t  name={robots[i].name}\r\n\t   email={robots[i].email}\r\n\t    />\r\n        );\r\n})\r\n}\r\n</div>\r\n);\r\n}\r\n\r\n\t\r\n\r\n\r\n\r\nexport default CardList;//7:00 min","import React from 'react'\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\r\nreturn (\r\n<div className='pa2'>\r\n<input \r\nclassName='pa3 ba b--green bg-lightest-blue'\r\ntype='search'\r\n placeholder='search robots' \r\n onChange={searchChange}\r\n />\r\n</div>\r\n);\r\n\r\n}\r\nexport default SearchBox;//5:29","import React,{Component} from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\nconstructor(props) {\r\nsuper(props);\r\nthis.state ={\r\n\thasError: false\r\n}\r\n}\r\n\r\nrender() {\r\n\tif(this.state.hasError) {\r\n\t\treturn <h1>ooops</h1>\r\n\t}\r\n\treturn this.props.children //anything in between errorBoundry\r\n}\r\n\r\ncomponentDidCatch(error,info) {\r\n\tthis.setState({hasError:true})\r\n\r\n}\r\n\r\n\r\n\r\n}\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../component/ErrorBoundry';\r\n\r\nclass App extends Component {//component to use render()\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n       robots:[],\r\n\t   searchfield:''\r\n\t\t}\r\n\t\tconsole.log('constructor');\r\n\t}\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n  .then(response => response.json())\r\n  .then(users => this.setState({robots:users}));\r\n\t\r\n\r\n}\r\n\r\n\r\n\t\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({ searchfield: event.target.value})\r\n      }\r\n\r\nrender() {\r\n\tconst filteredRobots = this.state.robots.filter(robots => {\r\n\t\t\t return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\tif(this.state.robots.length === 0) {\r\n\t\treturn <h1>loading</h1>\r\n\t} else {\r\n\treturn (\r\n\t<div className='tc'>\r\n\t\r\n\t<h1 className='f1'>RoboFriends</h1>\r\n\t\r\n\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t<ErrorBoundry>\r\n   <CardList robots={filteredRobots}/>\r\n   </ErrorBoundry>\r\n  \r\n</div>\r\n\t);\r\n\r\n}\r\n}\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App/>,document.getElementById('root'));\n    \n \n  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}